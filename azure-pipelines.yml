# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

variables:
- group: MLOps_Template_variables

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python37:
      python.version: '3.7'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: |
    pip install pytest && pytest tests --doctest-modules --junitxml=junit/test-results.xml
  displayName: 'pytest'

- script: |
    python create-and-run-ml-pipeline.py  --tenant_id $(tenant_id) --application_id $(application_id) --app_secret $(app_secret) --subscription_id $(subscription_id) --resource_group $(resource_group) --workspace_name $(workspace_name) --workspace_region $(workspace_region) --model_name $(model_name) --cluster_name_cpu $(cluster_name_cpu) --cluster_name_gpu $(cluster_name_gpu) --pipeline_experiment_name $(pipeline_experiment_name) --pipeline_name $(pipeline_name)
  displayName: 'Run, build and publish the ML Pipeline'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: $(Build.SourcesDirectory)
    Contents: |
      Score/**
      TestDeployment/**
      requirements_release.txt
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishPipelineArtifact@1
  inputs:
    #pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'score-files'
    publishLocation: 'pipeline'
  displayName: 'Publish Artifact'
